syntax = "proto2";
import "flux_options.proto";
import "strat_core.proto";
import "ui_core.proto";
package pair_strat_trader;

// Widget-2
// BOILER PLATE - don't add fields by changing sequence numbers in model: even in dev
// if you must , update loaded_strat_keys abbreviation accordingly
message PairStratParams{
  option (FluxMsgLayout) = "Tree";

  optional string exch_id = 1 [(FluxFldServerPopulate) = true];
  // server provided via security auto complete list (if available)
  required Security leg1_sec = 2 [(FluxFldOrmNoUpdate) = true, (FluxFldAutoComplete) = "sec_id:CB_List, sec_type=SEDOL"];
  // server provided via security auto complete list (if available). Open price OR Close Price OR Last Price
  optional ReferencePx leg1_sec_reference_px = 3;
  required Security leg2_sec = 4 [(FluxFldOrmNoUpdate) = true, (FluxFldAutoComplete) = "sec_id:EQT_List, sec_type=RIC"];
  // server provided via security auto complete list (if available). Open price OR Close Price OR Last Price
  optional ReferencePx leg2_sec_reference_px = 5;
  required Side leg1_side = 6 [(FluxFldOrmNoUpdate) = true];
  // default: same as portfolio eligible_brokers except filtered by symbol + allow mod down, reduce portfolio lvl & save
  repeated Broker eligible_brokers = 7;
  optional ResidualRestriction residual_restriction = 8;
  optional int32 exch_response_max_seconds = 9 [default = 30, (FluxFldHide) = "True", (FluxFldServerPopulate) = true];
  // these are specific to CB-EQT strat - move to derived later
  required float trigger_premium_percentage = 10;
  optional float hedge_ratio = 11 [default = 1];
}

// Widget - 3
message StratStatus{
  option (FluxMsgLayout) = "Table";
  option (FluxMsgServerPopulate) = true;

  // One or more alerts
  repeated Alert strat_alerts = 1;
  required StratState strat_state = 2 [default = UNSPECIFIED];
  // these are specific to CB-EQT strat - move to derived later
  optional float average_premium = 3;
  repeated CumulativeOrderBrief fills_brief = 4 [(FluxFldAbbreviated) = "JSON"];
  repeated CumulativeOrderBrief open_orders_brief = 5 [(FluxFldAbbreviated) = "JSON"];
  optional float balance_notional = 6;
  optional Residual residual = 7;
}

//Widget - 4
message StratLimits{
  option (FluxMsgLayout) = "Table";

  required float max_cb_notional = 1 [(FluxFldHelp) = "consumption: open+executed, max eqt notional derived applying hedge ratio"];
  required float max_open_cb_notional = 2 [(FluxFldHelp) = "max open eqt notional derived applying hedge ratio ]"];
  required int32 max_open_baskets = 3  [(FluxFldHelp) = "max simultaneous open order pairs allowed for this strat"];
  optional MarketParticipation market_participation = 4 [(FluxFldHelp) = "server provided, UI overridable"];
  optional float max_concentration = 5 [(FluxFldHelp) = "server provided, UI overridable"];
}

//Widget - 5
message OrderLimits{
  option (FluxMsgJsonRoot) = {
    CreateDesc: "Create Doc for OrderLimits",
    ReadDesc: "Read Doc for OrderLimits",
    UpdateDesc: "Update Doc for OrderLimits",
    DeleteDesc: "Delete Doc for OrderLimits"
  };
  option (FluxMsgLayout) = "Table";
  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required int32 max_price_levels = 2 [(FluxFldSequenceNumber) = 1];
  required int32 max_basis_points = 3 [(FluxFldValMax) = "15", (FluxFldSequenceNumber) = 2];
  required int32 max_cb_order_notional = 4 [(FluxFldSequenceNumber) = 3, (FluxFldHelp) = "open+executed; max ord eqt notional derived (hedge ratio)"];
  required float max_px_deviation = 5 [default = 2, (FluxFldSequenceNumber) = 4, (FluxFldHelp) = "% of Last Traded Price"];
}

//Widget - 6
message PortfolioLimits{
  option (FluxMsgJsonRoot) = {
    CreateDesc: "Create Doc for PortfolioLimits",
    ReadDesc: "Read Doc for PortfolioLimits",
    UpdateDesc: "Update Doc for PortfolioLimits",
    DeleteDesc: "Delete Doc for PortfolioLimits"
  };
  option (FluxMsgLayout) = "Table";

  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  // auto update symbol's availability when allocated/consumed by strat(block strat creation if not enough availability), this has both limit and status in Position
  repeated Broker eligible_brokers = 2 [(FluxFldSequenceNumber) = 3];
  required float max_cb_notional = 3 [(FluxFldSequenceNumber) = 1, (FluxFldHelp) = "consumption: open+executed, max eqt notional derived applying hedge ratio"];
  required CancelRate cancel_rate = 4 [(FluxFldSequenceNumber) = 2];
}

//Widget - 7
message PortfolioStatus{
  option (FluxMsgJsonRoot) = {
    CreateDesc: "Create Doc for PortfolioStatus",
    ReadDesc: "Read Doc for PortfolioStatus",
    UpdateDesc: "Update Doc for PortfolioStatus",
    DeleteDesc: "Delete Doc for PortfolioStatus"
  };
  option (FluxMsgLayout) = "Table";

  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  //The big RED button
  required bool kill_switch = 2 [default = false, (FluxFldSwitch) = true,  (FluxFldColor) = "true=ERROR,false=UNSPECIFIED"];
  // One or more alerts
  repeated Alert portfolio_alerts = 3;
  // Open + Executed
  optional float overall_buy_notional = 4;
  // Open + Executed
  optional float overall_sell_notional = 5;
  //repeated Broker eligible_brokers = 5; // this has both limit and status in Position, status get from PortfolioLimits
}

// Don't rename fields - if you must , update loaded_strat_keys abbreviation accordingly
message PairStrat{
    option (FluxMsgJsonRoot) = {
      CreateDesc: "Create Doc for PairStrat",
      ReadDesc: "Read Doc for PairStrat",
      UpdateDesc: "Update Doc for PairStrat",
      DeleteDesc: "Delete Doc for PairStrat"
    };
    //Server generated unique Id
    required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
    //An int64 may or may-not be date time. A datetime field must have FluxFldValDateTime option set
    // CodeGen to handle appropriate datetime generation if the FluxFldValIsDateTime option is set
    optional int64 last_active_date_time = 2 [(FluxFldHide) = "True", (FluxFldValSortWeight) = 2, (FluxFldServerPopulate) = true, (FluxFldValIsDateTime) = true];
    optional int32  frequency = 3 [(FluxFldHide) = "True", (FluxFldValSortWeight) = 1, (FluxFldServerPopulate) = true];
    required PairStratParams pair_strat_params = 4;
    optional StratStatus strat_status = 5;
    required StratLimits strat_limits = 6;
}

// Widget - 1
message StratCollection{
  option (FluxMsgJsonRoot) = {
    CreateDesc: "Create Doc for StratCollection",
    ReadDesc: "Read Doc for StratCollection",
    UpdateDesc: "Update Doc for StratCollection",
    DeleteDesc: "Delete Doc for StratCollection"
  };
  option (FluxMsgLayout) = "AbbreviatedFilter";

  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  // leg1_sec_id-leg2_sec_id-leg1_side-uid
  repeated string loaded_strat_keys = 2 [(FluxFldAbbreviated) = "PairStrat.pair_strat_params.leg2_sec.sec_id-PairStrat.pair_strat_params.leg1_sec.sec_id-PairStrat.pair_strat_params.leg1_side-PairStrat.id", (FluxFldAlertBubbleSource) = "PairStrat.strat_status.strat_alerts", (FluxFldAlertBubbleColor) = "PairStrat.strat_status.strat_alerts.severity"];
  //show 9 most recently used (weight:2) & 9 most frequently used (weight: 1)
  //Sort by type, merge by weight, FILTER OUT loaded
  repeated string buffered_strat_keys = 3;
}


message UILayout{
    option (FluxMsgJsonRoot) = {
      CreateDesc: "Create Doc for UILayout",
      ReadDesc: "Read Doc for UILayout",
      UpdateDesc: "Update Doc for UILayout",
      DeleteDesc: "Delete Doc for UILayout"
    };

    //Server generated unique Id
    required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
    required string profile_id = 2 [(FluxFldIndex) = true];
    repeated WidgetUIData widget_ui_data = 3;
    optional Theme theme = 4;
}
